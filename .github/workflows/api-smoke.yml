name: API Smoke (data.go.kr)
on: { workflow_dispatch: {} }

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Probe endpoints (HTTPS first, then HTTP)
        env:
          SERVICE_KEY: ${{ secrets.SERVICE_KEY }}
        run: |
          python - <<'PY'
          import os, json, requests, pathlib

          svc = (os.environ.get("SERVICE_KEY") or "").strip()
          if not svc:
            raise SystemExit("SERVICE_KEY secret not set")

          # HTTPS → HTTP 순서로 다양한 조합을 모두 시도
          CANDIDATES = [
            # HTTPS
            "https://apis.data.go.kr/B551011/KorService1/areaBasedList1",
            "https://apis.data.go.kr/B551011/KorService/areaBasedList1",
            "https://apis.data.go.kr/B551011/KorService1/areaBasedList",
            "https://apis.data.go.kr/B551011/KorService/areaBasedList",
            # HTTP
            "http://apis.data.go.kr/B551011/KorService1/areaBasedList1",
            "http://apis.data.go.kr/B551011/KorService/areaBasedList1",
            "http://apis.data.go.kr/B551011/KorService1/areaBasedList",
            "http://apis.data.go.kr/B551011/KorService/areaBasedList",
          ]

          base_params = {
            "MobileOS": "ETC",
            "MobileApp": "CI-Smoke",
            "_type": "json",
            "areaCode": 1,
            "numOfRows": 5,
            "pageNo": 1,
            "listYN": "Y",
            "arrange": "A",
          }
          headers = {"Accept": "application/json,*/*", "User-Agent": "ci-smoke/1.0"}

          def call(url: str):
            params = dict(base_params)
            if "%" in svc:
              full = f"{url}?serviceKey={svc}"
            else:
              full = url
              params["serviceKey"] = svc
            # verify 인자 넣지 말기 (bool/경로만 허용됨)
            return requests.get(full, params=params, timeout=25, headers=headers, allow_redirects=True)

          pathlib.Path("out").mkdir(exist_ok=True)
          logs, winner = [], None

          for url in CANDIDATES:
            try:
              r = call(url)
              logs.append(f"try {url} -> {r.status_code} {r.headers.get('content-type')}")
              ctype = (r.headers.get("content-type") or "").lower()
              if "json" not in ctype:
                open("out/last_non_json.txt","w",encoding="utf-8").write(r.text)
                continue
              data = r.json()
              code = (((data.get("response") or {}).get("header")) or {}).get("resultCode")
              if code == "0000":
                winner = (url, data); break
              else:
                open("out/last_json.json","w",encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
            except Exception as e:
              logs.append(f"error {url}: {e!r}")
              continue

          open("out/attempts.log","w").write("\n".join(logs))

          if not winner:
            raise SystemExit("No candidate returned valid JSON with code=0000")

          url, data = winner
          items = (((data.get("response") or {}).get("body") or {}).get("items") or {}).get("item") or []
          if isinstance(items, dict): items = [items]
          open("out/pois.json","w",encoding="utf-8").write(json.dumps(items, ensure_ascii=False, indent=2))
          open("out/winner.txt","w").write(url)
          print("[OK] winner:", url, "count:", len(items))
          PY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-smoke-output
          path: out/
