name: API Smoke (data.go.kr)
on: { workflow_dispatch: {} }

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Probe multiple endpoints (pick first valid JSON)
        env:
          SERVICE_KEY: ${{ secrets.SERVICE_KEY }}
        run: |
          python - <<'PY'
          import os, json, requests, ssl, pathlib

          svc = (os.environ.get("SERVICE_KEY") or "").strip()
          if not svc:
              raise SystemExit("SERVICE_KEY secret not set")

          # 후보 엔드포인트(문서/실서비스 혼용 대비)
          CANDIDATES = [
              "https://apis.data.go.kr/B551011/KorService1/areaBasedList1",
              "https://apis.data.go.kr/B551011/KorService/areaBasedList1",
              "https://apis.data.go.kr/B551011/KorService1/areaBasedList",
              "https://apis.data.go.kr/B551011/KorService/areaBasedList",
          ]

          params_base = {
              "MobileOS": "ETC",
              "MobileApp": "CI-Smoke",
              "_type": "json",
              "areaCode": 1,
              "numOfRows": 5,
              "pageNo": 1,
          }

          hdrs = {
              "Accept": "application/json,*/*",
              "User-Agent": "ci-smoke/1.0",
          }

          def call(url):
    params = dict(base_params)
    if "%" in svc:
        full = f"{url}?serviceKey={svc}"
    else:
        full = url
        params["serviceKey"] = svc

    headers = {"Accept": "application/json,*/*", "User-Agent": "ci-smoke/1.0"}

    # ✨ verify 인자 제거 (ctx 사용 금지)
    return requests.get(full, params=params, timeout=20, headers=headers)

          pathlib.Path("out").mkdir(exist_ok=True)
          winner = None
          logs = []
          for url in CANDIDATES:
              try:
                  r = call(url)
                  logs.append(f"try {url} -> {r.status_code} {r.headers.get('content-type')}")
                  ctype = (r.headers.get("content-type") or "").lower()
                  if "json" not in ctype:
                      # SOAP Fault/HTML 등
                      open("out/last_non_json.txt","w",encoding="utf-8").write(r.text)
                      continue
                  data = r.json()
                  code = (((data.get("response") or {}).get("header")) or {}).get("resultCode")
                  if code == "0000":
                      winner = (url, data)
                      break
                  else:
                      open("out/last_json.json","w",encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
              except Exception as e:
                  logs.append(f"error {url}: {e!r}")
                  continue

          open("out/attempts.log","w").write("\n".join(logs))

          if not winner:
              raise SystemExit("No candidate returned valid JSON with code=0000")

          url, data = winner
          items = (((data.get("response") or {}).get("body") or {}).get("items") or {}).get("item") or []
          if isinstance(items, dict): items = [items]
          open("out/pois.json","w",encoding="utf-8").write(json.dumps(items, ensure_ascii=False, indent=2))
          open("out/winner.txt","w").write(url)
          print("[OK] winner:", url, "count:", len(items))
          PY

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-smoke-output
          path: out/
